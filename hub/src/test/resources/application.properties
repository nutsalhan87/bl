primary.datasource.url=jdbc:h2:mem:${random.uuid};DB_CLOSE_DELAY=-1;NON_KEYWORDS=value
primary.datasource.username=
primary.datasource.password=
primary.datasource.db=h2

comments.datasource.url=jdbc:h2:mem:${random.uuid};DB_CLOSE_DELAY=-1;NON_KEYWORDS=value
comments.datasource.username=
comments.datasource.password=
comments.datasource.db=h2

hibernate.hbm2ddl.auto=create-drop

#client registration configuration
spring.security.oauth2.client.registration.keycloak.client-id=bl
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid

# OIDC provider configuration
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://rtg6.ru:8080/realms/tenant

# validating JWT token against our Keycloak server
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://rtg6.ru:8080/realms/tenant

spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=hub-test-group